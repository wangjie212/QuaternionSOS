using Random
include("Qpop.jl")
#Test1
##n=20 seed=4,2,3;n=40 seed=1,2,3;n=60 seed=11,12,13
rng = Xoshiro(4)
n = 20
@ncpolyvar q[1:2n]
f=randomsymfunc(q,n,1,rng;conjugates=false,coelimit=false)
g=1
for i=1:n
    g=g+(-1)*q[i]*q[i+n]
end
# g = 1-1*q[1]*q[3]-1*q[2]*q[4]
gn=[]
for j=1:n
    temp=1+(-1)*q[j]*q[j+n]
    push!(gn,temp)
end
order = 1
###ball
qpop=[f,g]
opt= qs_tssos_first(qpop, q, n, order, numeq=0,TS=false)
####qualify
pop,x= quaternion_to_real(qpop,q)
opt2,sol,data = tssos_first(pop, x, order, numeq=0,TS=false,solution=true)
println(data.blocksize[1][1])
# ###sphere
# qpop = [f,g]
# opt= qs_tssos_first(qpop, q, n,order, numeq=1,TS=false)
# ####qualify
# pop,x = quaternion_to_real(qpop,q)
# opt2 = tssos_first(pop, x, order, numeq=1,TS=false,solution=true)

###unit norm
qpop = append!([f],gn)
opt= qs_tssos_first(qpop, q, n, order, numeq=n,TS=false)
####qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, order,numeq=n ,TS=false,solution=true)

#Test2
# n=20,40,60 seed=11,12,13;
rng = Xoshiro(11)
n = 40
@ncpolyvar q[1:2n]
f=randomsymfunc(q,n,1,rng;conjugates=true,coelimit=false)
g=1
for i=1:n
    g=g+(-1)*q[i]*q[i+n]
end
gn=[]
for j=1:n
    temp=1+(-1)*q[j]*q[j+n]
    push!(gn,temp)
end
order = 1
###ball
qpop=[f,g]
opt= qs_tssos_first(qpop, q, n, order,numeq=0,TS=false)
####qualify
pop,x= quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, order, numeq=0,TS=false,solution=true)
###sphere
qpop = [f,g]
opt= qs_tssos_first(qpop, q, n, order, numeq=1, TS=false)
####qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, order, numeq=1,TS=false,solution=true)

###unit norm
qpop = append!([f],gn)
opt= qs_tssos_first(qpop, q, n, order, numeq=n, TS=false)
####qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, order,numeq=n ,TS=false,solution=true)
#Test3
# n=1,2,3,4,5,6 seed=11,12,13;
rng = Xoshiro(11)
n = 5
@ncpolyvar q[1:2n]
f=randomsymfunc(q,n,2,rng;conjugates=true,coelimit=true)
g=1
for i=1:n
    g=g+(-1)*q[i]*q[i+n]
end
gn=[]
for j=1:n
    temp=1+(-1)*q[j]*q[j+n]
    push!(gn,temp)
end
order = 2
###ball
qpop=[f,g]
opt= qs_tssos_first(qpop, q, n, order,numeq=0,TS=false)
####qualify
pop,x= quaternion_to_real(qpop,q)
opt2,sol,data = tssos_first(pop, x, order, numeq=0,TS=false,solution=true)
println(data.blocksize[1][1])
###sphere
qpop = [f,g]
opt= qs_tssos_first(qpop, q, n, order, numeq=1, TS=false)
####qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, order, numeq=1,TS=false,solution=true)

###unit norm
qpop = append!([f],gn)
opt= qs_tssos_first(qpop, q, n, order, numeq=n, TS=false)
####qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, order,numeq=n ,TS=false,solution=true)
#Test4
# n=1,2,3,4,5,6 seed=30,60,90;
rng = Xoshiro(30)
n = 1
@ncpolyvar q[1:2n]
f=randomsymfunc(q,n,2,rng;conjugates=false,coelimit=true)
g=1
for i=1:n
    g=g+(-1)*q[i]*q[i+n]
end
gn=[]
for j=1:n
    temp=1+(-1)*q[j]*q[j+n]
    push!(gn,temp)
end
order = 2
###ball
qpop=[f,g]
opt= qs_tssos_first(qpop, q, n, order,numeq=0,TS=false)
####qualify
pop,x= quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, order, numeq=0,TS=false,solution=true)
###sphere
qpop = [f,g]
opt= qs_tssos_first(qpop, q, n, order, numeq=1, TS=false)
####qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, order, numeq=1,TS=false,solution=true)

###unit norm
qpop = append!([f],gn)
opt= qs_tssos_first(qpop, q, n, order, numeq=n, TS=false)
####qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, order,numeq=n ,TS=false,solution=true)






























# # Example1 
# # Transform to symmetric equation
# n = 2 # set the number of quaternion variables
# @polyvar q[1:2n]
# f = quat(1,0,0,0)*q[1]*q[3]+quat(1,0,0,0)*q[2]*q[4]
# g1 = quat(3,0,0,0)-quat(1,0,0,0)*q[1]*q[3]-quat(1,0,0,0)*q[2]*q[4]
# g2 = quat(2,0,0,0)-quat(1,0,0,0)*q[1]-quat(1,0,0,0)*q[2]-quat(1,0,0,0)*q[3]-quat(1,0,0,0)*q[4]
# g3 = quat(0,1,1,1)*q[1]-quat(0,1,1,1)*q[3]+quat(0,1,1,1)*q[2]-quat(0,1,1,1)*q[4]
# qpop = [f,g1,g2,g3]
# supp,coef=Qpolys_info(qpop,q,n)
# order = 2# set the relaxation order
# opt,cons,Ic,Jc= qs_tssos_first(qpop, q, n, order, numeq=2, TS=false)
# sqrt(opt)
# pop,x = quaternion_to_real(qpop,q)
# opt2 = tssos_first(pop, x, order, numeq=2)
# sqrt(opt2[1])

# # Example1 delete one equation
# n = 1
# @polyvar q[1:2n]
# f = quat(2,0,0,0)*q[1]*q[2]+quat(1,0,0,0)-quat(1,0,0,0)*q[1]-quat(1,0,0,0)*q[2]
# g1 = quat(3,0,0,0)-quat(2,0,0,0)*q[1]*q[2]-quat(1,0,0,0)+quat(1,0,0,0)*q[1]+quat(1,0,0,0)*q[2]
# qpop = [f, g1]
# order = 2
# opt,cons,I,basis= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false)
# sqrt(opt)
# #qualitify
# pop,x = quaternion_to_real(qpop,q)
# opt2 = tssos_first(pop, x, order, numeq=0)

# Example2 infeasible for nonsymmetric
# n = 2
# @polyvar q[1:2n]
# f = quat(1,0,0,0)*q[1]*q[3]+quat(1,0,0,0)*q[2]*q[4]+quat(1/2,-3/2,-3/2,-3/2)*q[1]+quat(1/2,3/2,3/2,3/2)*q[2]+quat(1/2,3/2,3/2,3/2)*q[3]+quat(1/2,-3/2,-3/2,-3/2)*q[4]
# g1 = quat(-7,0,0,0)-quat(1,0,0,0)*q[1]*q[3]+quat(1,-1,-1,-1)*q[1]+quat(1,1,1,1)*q[3]-quat(1,0,0,0)*q[2]*q[4]+quat(1,-1,-1,-1)*q[2]+quat(1,1,1,1)*q[4]
# g2 = quat(1,1,1,1)*q[1]+quat(1,-1,-1,-1)*q[3]+quat(2,-1,-1,-1)*q[2]+quat(2,1,1,1)*q[4]
# g3 = quat(-2,-2,0,2)-quat(-3,1,1,1)*q[1]-quat(3,2,2,2)*q[2]-quat(-3,-1,-1,-1)*q[3]-quat(3,-2,-2,-2)*q[4]
# qpop = [f,g1,g2,g3]
# order = 2
# opt,cons,I,J,basis,hbasis= qs_tssos_first(qpop, q, n, order, numeq=2, TS=false)
# pop,x = quaternion_to_real(qpop,q)
# opt2 = tssos_first(pop, x, 2, numeq=2,TS=false)

# Example 2 transform to one variable
#infeasible?
# n = 1 
# @polyvar q[1:2n]
# f = quat(11/7,0,0,0)*q[1]*q[2]+quat(-6/7,0,0,0)+quat(33/14,-145/98,-157/98,-136/98)*q[1]+quat(33/14,145/98,157/98,136/98)*q[2]
# g = quat(-48/7,0,0,0)-quat(11/7,0,0,0)*q[1]*q[2]+quat(0,78/49,72/49,88/49)*q[2]+quat(0,-78/49,-72/49,-88/49)*q[1]
# qpop = [f,g]
# order = 3
# opt,cons,I,J,basis,hbasis= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false)

# pop,x = quaternion_to_real(qpop,q)
# opt2 = tssos_first(pop, x, 4, TS=false, numeq=0)


# #Random
# #n=1
# qcoef=rand(rng,Float64,7)
# n = 1
# @ncpolyvar q[1:2n]
# f = randomsymfunc(q,1,1,1)
# g = quat(1,0,0,0)-quat(1,0,0,0)*q[1]*q[2]
# qpop = [f,g]
# println(f)
# order = 1
# opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false,QUIET=true)
# #qualify
# pop,x = quaternion_to_real(qpop,q)
# opt_tssos = tssos_first(pop, x, 2, numeq=0,solution=true,QUIET=true)
# #n=2
# rng = Xoshiro(2)
# # fcoef=rand(rng,QuaternionF64,4)
# qcoef=rand(rng,Float64,8)
# n = 2
# @ncpolyvar q[1:2n]
# f=randomsymfunc(q,n,1,rng)
# println(f)
# println(qcoef[1]*q[1]^2+qcoef[1]*q[3]^2+qcoef[2]*q[2]^2+qcoef[2]*q[4]^2+qcoef[3]*q[1]*q[2]+qcoef[3]*q[4]*q[3]+qcoef[6]*q[4]*q[1]+qcoef[6]*q[3]*q[2]+qcoef[5]*q[2]*q[1]+qcoef[5]*q[3]*q[4]+qcoef[4]*q[1]*q[4]+qcoef[4]*q[2]*q[3])
# f = qcoef[1]*q[1]^2+qcoef[1]*q[3]^2+qcoef[2]*q[2]^2+qcoef[2]*q[4]^2+qcoef[3]*q[1]*q[2]+qcoef[3]*q[4]*q[3]+qcoef[6]*q[4]*q[1]+qcoef[6]*q[3]*q[2]+qcoef[5]*q[2]*q[1]+qcoef[5]*q[3]*q[4]+qcoef[4]*q[1]*q[4]+qcoef[4]*q[2]*q[3]
# g = 1-q[1]*q[3]-q[2]*q[4]
# g1 = quat(1,0,0,0)-quat(1,0,0,0)*q[1]*q[3]
# g2 = quat(1,0,0,0)-quat(1,0,0,0)*q[2]*q[4]
# # +qcoef[7]*q[1]^2+qcoef[7]*q[3]^2+qcoef[8]*q[2]^2+qcoef[8]*q[4]^2
# qpop = [f,g]
# order = 1
# opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false)
# opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false, normality=order)
# # println(qcoef[1]*(x[1]+II*x[3]+J*x[5]+K*x[7])^2+qcoef[1]*(x[1]-II*x[3]-J*x[5]-K*x[7])^2+qcoef[2]*(x[2]+II*x[4]+J*x[6]+K*x[8])^2+qcoef[2]*(x[2]-II*x[4]-J*x[6]-K*x[8])^2+qcoef[3]*(x[1]+II*x[3]+J*x[5]+K*x[7])*(x[2]+II*x[4]+J*x[6]+K*x[8])+qcoef[3]*(x[2]-II*x[4]-J*x[6]-K*x[8])*(x[1]-II*x[3]-J*x[5]-K*x[7])+qcoef[4]*(x[1]+II*x[3]+J*x[5]+K*x[7])*(x[2]-II*x[4]-J*x[6]-K*x[8])+qcoef[4]*(x[2]+II*x[4]+J*x[6]+K*x[8])*(x[1]-II*x[3]-J*x[5]-K*x[7])+qcoef[5]*(x[2]+II*x[4]+J*x[6]+K*x[8])*(x[1]+II*x[3]+J*x[5]+K*x[7])+qcoef[5]*(x[1]-II*x[3]-J*x[5]-K*x[7])*(x[2]-II*x[4]-J*x[6]-K*x[8])+qcoef[6]*(x[2]-II*x[4]-J*x[6]-K*x[8])*(x[1]+II*x[3]+J*x[5]+K*x[7])+qcoef[6]*(x[1]-II*x[3]-J*x[5]-K*x[7])*(x[2]+II*x[4]+J*x[6]+K*x[8]))
# # II=quat(0,1,0,0)
# # J=quat(0,0,1,0)
# # K=quat(0,0,0,1)
# # q[1]=x[1]+II*x[3]+J*x[5]+K*x[7]
# # q[2]=x[2]+II*x[4]+J*x[6]+K*x[8]
# # q[3]=x[1]-II*x[3]-J*x[5]-K*x[7]
# # q[4]=x[2]-II*x[4]-J*x[6]-K*x[8]
# #qualify
# pop,x = quaternion_to_real(qpop,q)
# opt2 = tssos_first(pop, x,2, TS=false, numeq=0,solution=true)


#n=1
rng = Xoshiro(11)
n = 2
@ncpolyvar q[1:2n]

f=randomsymfunc(q,n,2,rng)
g=1
for i=1:n
    g=g+(-1)*q[i]*q[i+n]
end
# g = 1-1*q[1]*q[3]-1*q[2]*q[4]
gn=[]
for j=1:n
    temp=1+(-1)*q[j]*q[j+n]
    push!(gn,temp)
end
order = 2
###ball
qpop=[f,g]
opt= qs_tssos_first(qpop, q, n, order, numeq=0,TS=false)
####qualify
pop,x= quaternion_to_real(qpop,q)
opt2,sol,data = tssos_first(pop, x, order, numeq=0,TS=false,solution=true)
println(data.blocksize[1][1])
###sphere
qpop = [f,g]
opt= qs_tssos_first(qpop, q, n,order, numeq=1,TS=false)
####qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, order, numeq=1,TS=false,solution=true)

###unit norm
qpop = append!([f],gn)
opt= qs_tssos_first(qpop, q, n, order, numeq=n,TS=false)
####qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, order,numeq=n ,TS=false,solution=true)

# n=1,...,6 d=2 seed=12,13,14
rng = Xoshiro(14)
n = 6
@ncpolyvar q[1:2n]
f=randomsymfunc(q,n,1,rng)
g=1
for i=1:n
    g=g+(-1)*q[i]*q[i+n]
end
gn=[]
for j=1:n
    temp=1+(-1)*q[j]*q[j+n]
    push!(gn,temp)
end
order = 1
###ball
qpop=[f,g]
opt= qs_tssos_first(qpop, q, n, order,numeq=0,TS=false)
####qualify
pop,x= quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 1, numeq=0,TS=false,solution=true)
###sphere
qpop = [f,g]
opt= qs_tssos_first(qpop, q, n, order, numeq=1, TS=false)
####qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 2, numeq=1,TS=false,solution=true)

###unit norm
qpop = append!([f],gn)
opt= qs_tssos_first(qpop, q, n, order, numeq=n, TS=false)
####qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 2,numeq=n ,TS=false,solution=true)

##d=4
rng = Xoshiro(10)
n=2
@ncpolyvar q[1:2n]
f=randomsymfunc(q,n,2,rng)
# f1=0.029474054599234245*q[1]^4+0.029474054599234245*q[3]^4+0.475969596224493*q[1]^3*q[2]+0.475969596224493*q[4]*q[3]^3+ 0.5036422959415874*q[1]^3*q[3]+ 0.5036422959415874*q[1]*q[3]^3
# f=0.029474054599234245*q[1]^4 + 0.475969596224493*q[1]^3*q[2] + 0.5036422959415874*q[1]^3*q[3] + 0.9119064516767408*q[1]^3*q[4] + 0.3906170116064773*q[1]^2*q[2]^2 + 0.16049822891540388*q[1]^2*q[2]*q[3] + 0.7705058819019722*q[1]^2*q[2]*q[4] + 0.13079843034129912*q[1]^2*q[2]*q[1] + 0.9333987296006188*q[1]^2*q[3]^2 + 0.10552700773213186*q[1]^2*q[3]*q[4] + 0.5329307663694776*q[1]^2*q[3]*q[1] + 0.5541071100410091*q[1]^2*q[4]^2 + 0.17386661683421878*q[1]^2*q[4]*q[1] + 0.7208803310946444*q[1]^2*q[4]*q[2] + 0.885302202035244*q[1]^2*q[4]*q[3] + 0.4612073938010328*q[1]*q[2]^3 + 0.6245808753662078*q[1]*q[2]^2*q[3] + 0.40370307543627715*q[1]*q[2]^2*q[4] + 0.746384896419054*q[1]*q[2]^2*q[1] + 0.5918305195478333*q[1]*q[2]*q[1]^2 + 0.09536686012218853*q[1]*q[2]*q[1]*q[2] + 0.4884771190513396*q[1]*q[2]*q[1]*q[3] + 0.18535447123019155*q[1]*q[2]*q[1]*q[4] + 0.885302202035244*q[1]*q[2]*q[3]^2 + 0.11068657610251698*q[1]*q[2]*q[3]*q[4] + 0.6786486975975576*q[1]*q[2]*q[3]*q[1] + 0.4613775074912848*q[1]*q[2]*q[3]*q[2] + 0.9118371450632791*q[1]*q[2]*q[4]^2 + 0.8649153147171645*q[1]*q[2]*q[4]*q[1] + 0.6992378749064913*q[1]*q[2]*q[4]*q[2] + 0.9374735024162644*q[1]*q[2]*q[4]*q[3] + 0.5036422959415874*q[1]*q[3]^3 + 0.8308044475397434*q[1]*q[3]^2*q[4] + 0.5547792154549017*q[1]*q[3]^2*q[1] + 0.09229137394825226*q[1]*q[3]^2*q[2] + 0.8271533956312648*q[1]*q[3]*q[1]^2 + 0.615949708830409*q[1]*q[3]*q[1]*q[2] + 0.996556516195713*q[1]*q[3]*q[1]*q[3] + 0.3659992718302786*q[1]*q[3]*q[1]*q[4] + 0.30678470446204387*q[1]*q[3]*q[2]^2 + 0.5197258410676219*q[1]*q[3]*q[2]*q[3] + 0.38775997584969957*q[1]*q[3]*q[2]*q[4] + 0.5673749113031746*q[1]*q[3]*q[2]*q[1] + 0.01787645046371278*q[1]*q[3]*q[4]^2 + 0.8133511707419904*q[1]*q[3]*q[4]*q[1] + 0.20455039424082655*q[1]*q[3]*q[4]*q[2] + 0.4884771190513396*q[1]*q[3]*q[4]*q[3] + 0.10176382463122369*q[1]*q[4]^3 + 0.9213055678381394*q[1]*q[4]^2*q[1] + 0.6337411623226838*q[1]*q[4]^2*q[2] + 0.6245808753662078*q[1]*q[4]^2*q[3] + 0.9814291478756534*q[1]*q[4]*q[1]^2 + 0.8976396202229603*q[1]*q[4]*q[1]*q[2] + 0.5197258410676219*q[1]*q[4]*q[1]*q[3] + 0.64635781398628*q[1]*q[4]*q[1]*q[4] + 0.6743685485442624*q[1]*q[4]*q[2]^2 + 0.6945406849309422*q[1]*q[4]*q[2]*q[3] + 0.7155649994316378*q[1]*q[4]*q[2]*q[4] + 0.0015489511413381285*q[1]*q[4]*q[2]*q[1] + 0.16049822891540388*q[1]*q[4]*q[3]^2 + 0.31332013557329064*q[1]*q[4]*q[3]*q[4] + 0.8266818890419037*q[1]*q[4]*q[3]*q[1] + 0.8462869135049883*q[1]*q[4]*q[3]*q[2] + 0.24649758558490797*q[2]^4 + 0.10176382463122369*q[2]^3*q[3] + 0.49510749544258714*q[2]^3*q[4] + 0.18457818604668275*q[2]^3*q[1] + 0.7744923265235808*q[2]^2*q[1]^2 + 0.28591435584221137*q[2]^2*q[1]*q[2] + 0.01787645046371278*q[2]^2*q[1]*q[3] + 0.47588588399017473*q[2]^2*q[1]*q[4] + 0.5541071100410091*q[2]^2*q[3]^2 + 0.4822294636226676*q[2]^2*q[3]*q[4] + 0.9868916530771493*q[2]^2*q[3]*q[1] + 0.5833549409668605*q[2]^2*q[3]*q[2] + 0.5778257907369783*q[2]^2*q[4]^2 + 0.10679907897013907*q[2]^2*q[4]*q[1] + 0.6918990950027051*q[2]^2*q[4]*q[2] + 0.9118371450632791*q[2]^2*q[4]*q[3] + 0.4310891098711509*q[2]*q[1]^3 + 0.9658427458323168*q[2]*q[1]^2*q[2] + 0.8308044475397434*q[2]*q[1]^2*q[3] + 0.5430354061178913*q[2]*q[1]^2*q[4] + 0.18042422358986498*q[2]*q[1]*q[2]^2 + 0.31332013557329064*q[2]*q[1]*q[2]*q[3] + 0.9295901863101748*q[2]*q[1]*q[2]*q[4] + 0.7666654343290248*q[2]*q[1]*q[2]*q[1] + 0.10552700773213186*q[2]*q[1]*q[3]^2 + 0.3584710551037805*q[2]*q[1]*q[3]*q[4] + 0.7976347998933961*q[2]*q[1]*q[3]*q[1] + 0.5933371379139635*q[2]*q[1]*q[3]*q[2] + 0.4822294636226676*q[2]*q[1]*q[4]^2 + 0.019988947218507525*q[2]*q[1]*q[4]*q[1] + 0.7299238574532758*q[2]*q[1]*q[4]*q[2] + 
# 0.11068657610251698*q[2]*q[1]*q[4]*q[3] + 0.9119064516767408*q[2]*q[3]^3 + 0.5430354061178913*q[2]*q[3]^2*q[4] + 0.8896873460976903*q[2]*q[3]^2*q[1] + 0.5823222653713309*q[2]*q[3]^2*q[2] + 0.6109195899418173*q[2]*q[3]*q[1]^2 + 0.5318082730666835*q[2]*q[3]*q[1]*q[2] + 0.3659992718302786*q[2]*q[3]*q[1]*q[3] + 0.9380264345368569*q[2]*q[3]*q[1]*q[4] + 0.2586997417507646*q[2]*q[3]*q[2]^2 + 0.64635781398628*q[2]*q[3]*q[2]*q[3] + 0.5417580850212215*q[2]*q[3]*q[2]*q[4] + 0.43161398247746485*q[2]*q[3]*q[2]*q[1] + 0.47588588399017473*q[2]*q[3]*q[4]^2 + 0.4881610638717965*q[2]*q[3]*q[4]*q[1] + 0.2053750697119212*q[2]*q[3]*q[4]*q[2] + 0.18535447123019155*q[2]*q[3]*q[4]*q[3] + 0.49510749544258714*q[2]*q[4]^3 + 0.30123248993290863*q[2]*q[4]^2*q[1] + 0.604797381057971*q[2]*q[4]^2*q[2] + 0.40370307543627715*q[2]*q[4]^2*q[3] + 0.24483917709051883*q[2]*q[4]*q[1]^2 + 0.23755289305313032*q[2]*q[4]*q[1]*q[2] + 0.38775997584969957*q[2]*q[4]*q[1]*q[3] + 0.5417580850212215*q[2]*q[4]*q[1]*q[4] + 0.49869737947566783*q[2]*q[4]*q[2]^2 + 0.7155649994316378*q[2]*q[4]*q[2]*q[3] + 0.4582641069451401*q[2]*q[4]*q[2]*q[4] + 0.014390760237682376*q[2]*q[4]*q[2]*q[1] + 0.7705058819019722*q[2]*q[4]*q[3]^2 + 0.9295901863101748*q[2]*q[4]*q[3]*q[4] + 0.26666825556315754*q[2]*q[4]*q[3]*q[1] + 0.981840932894439*q[2]*q[4]*q[3]*q[2] + 0.029474054599234245*q[3]^4 + 0.4310891098711509*q[3]^3*q[4] + 0.7929089563253252*q[3]^3*q[1] + 0.1975965196149605*q[3]^3*q[2] + 0.8667895179398338*q[3]^2*q[1]^2 + 0.7381649879392063*q[3]^2*q[1]*q[2] + 0.8271533956312648*q[3]^2*q[1]*q[3] + 0.6109195899418173*q[3]^2*q[1]*q[4] + 0.49342665231842253*q[3]^2*q[2]^2 + 0.9814291478756534*q[3]^2*q[2]*q[3] + 0.24483917709051883*q[3]^2*q[2]*q[4] + 0.02724215266335639*q[3]^2*q[2]*q[1] + 0.7744923265235808*q[3]^2*q[4]^2 + 0.36866054979715757*q[3]^2*q[4]*q[1] + 0.646716024094237*q[3]^2*q[4]*q[2] + 0.5918305195478333*q[3]^2*q[4]*q[3] + 0.7929089563253252*q[3]*q[1]^3 + 0.5025033714819218*q[3]*q[1]^2*q[2] + 0.5547792154549017*q[3]*q[1]^2*q[3] + 0.8896873460976903*q[3]*q[1]^2*q[4] + 0.4648438860023604*q[3]*q[1]*q[2]^2 + 0.8266818890419037*q[3]*q[1]*q[2]*q[3] + 0.26666825556315754*q[3]*q[1]*q[2]*q[4] + 
# 0.831340396218595*q[3]*q[1]*q[2]*q[1] + 0.5329307663694776*q[3]*q[1]*q[3]^2 + 0.7976347998933961*q[3]*q[1]*q[3]*q[4] + 0.3705710902380688*q[3]*q[1]*q[3]*q[1] + 0.7430984127657381*q[3]*q[1]*q[3]*q[2] + 0.9868916530771493*q[3]*q[1]*q[4]^2 + 0.9381278890721954*q[3]*q[1]*q[4]*q[1] + 0.19688564812646603*q[3]*q[1]*q[4]*q[2] + 0.6786486975975576*q[3]*q[1]*q[4]*q[3] + 0.1455753929942224*q[3]*q[2]^3 + 0.9213055678381394*q[3]*q[2]^2*q[3] + 0.30123248993290863*q[3]*q[2]^2*q[4] + 0.6059417475538207*q[3]*q[2]^2*q[1] + 0.36866054979715757*q[3]*q[2]*q[1]^2 + 0.9231242454491305*q[3]*q[2]*q[1]*q[2] + 0.8133511707419904*q[3]*q[2]*q[1]*q[3] + 0.4881610638717965*q[3]*q[2]*q[1]*q[4] + 0.17386661683421878*q[3]*q[2]*q[3]^2 + 0.019988947218507525*q[3]*q[2]*q[3]*q[4] + 0.9381278890721954*q[3]*q[2]*q[3]*q[1] + 0.13801865006333547*q[3]*q[2]*q[3]*q[2] + 0.10679907897013907*q[3]*q[2]*q[4]^2 + 0.7487936165007776*q[3]*q[2]*q[4]*q[1] + 0.7626998393501524*q[3]*q[2]*q[4]*q[2] + 0.8649153147171645*q[3]*q[2]*q[4]*q[3] + 0.18457818604668275*q[3]*q[4]^3 + 0.6059417475538207*q[3]*q[4]^2*q[1] + 0.3333297263538666*q[3]*q[4]^2*q[2] + 0.746384896419054*q[3]*q[4]^2*q[3] + 0.02724215266335639*q[3]*q[4]*q[1]^2 + 0.7066913495751626*q[3]*q[4]*q[1]*q[2] + 0.5673749113031746*q[3]*q[4]*q[1]*q[3] + 0.43161398247746485*q[3]*q[4]*q[1]*q[4] + 0.7143960212505326*q[3]*q[4]*q[2]^2 + 0.0015489511413381285*q[3]*q[4]*q[2]*q[3] + 0.014390760237682376*q[3]*q[4]*q[2]*q[4] + 0.8941533782110845*q[3]*q[4]*q[2]*q[1] + 0.13079843034129912*q[3]*q[4]*q[3]^2 + 0.7666654343290248*q[3]*q[4]*q[3]*q[4] + 0.831340396218595*q[3]*q[4]*q[3]*q[1] + 0.05931789184974978*q[3]*q[4]*q[3]*q[2] + 0.24649758558490797*q[4]^4 + 0.1455753929942224*q[4]^3*q[1] + 0.41369211233754277*q[4]^3*q[2] + 0.4612073938010328*q[4]^3*q[3] + 0.49342665231842253*q[4]^2*q[1]^2 + 0.930738875334965*q[4]^2*q[1]*q[2] + 0.30678470446204387*q[4]^2*q[1]*q[3] + 0.2586997417507646*q[4]^2*q[1]*q[4] + 0.3436576277568617*q[4]^2*q[2]^2 + 0.6743685485442624*q[4]^2*q[2]*q[3] + 0.49869737947566783*q[4]^2*q[2]*q[4] + 0.7143960212505326*q[4]^2*q[2]*q[1] + 0.3906170116064773*q[4]^2*q[3]^2 + 0.18042422358986498*q[4]^2*q[3]*q[4] + 0.4648438860023604*q[4]^2*q[3]*q[1] + 0.8622503330816983*q[4]^2*q[3]*q[2] + 0.1975965196149605*q[4]*q[1]^3 + 0.2780579169890661*q[4]*q[1]^2*q[2] + 0.09229137394825226*q[4]*q[1]^2*q[3] + 0.5823222653713309*q[4]*q[1]^2*q[4] + 0.8622503330816983*q[4]*q[1]*q[2]^2 + 0.8462869135049883*q[4]*q[1]*q[2]*q[3] + 0.981840932894439*q[4]*q[1]*q[2]*q[4] + 0.05931789184974978*q[4]*q[1]*q[2]*q[1]+ 0.5933371379139635*q[4]*q[1]*q[3]*q[4] + 0.7430984127657381*q[4]*q[1]*q[3]*q[1] + 0.6995751636993329*q[4]*q[1]*q[3]*q[2] + 0.5833549409668605*q[4]*q[1]*q[4]^2 + 0.13801865006333547*q[4]*q[1]*q[4]*q[1] + 0.4317965820419404*q[4]*q[1]*q[4]*q[2] + 0.4613775074912848*q[4]*q[1]*q[4]*q[3] + 0.41369211233754277*q[4]*q[2]^3 + 0.6337411623226838*q[4]*q[2]^2*q[3] + 0.604797381057971*q[4]*q[2]^2*q[4] + 0.3333297263538666*q[4]*q[2]^2*q[1] + 0.646716024094237*q[4]*q[2]*q[1]^2 + 0.5131799219334342*q[4]*q[2]*q[1]*q[2] + 0.20455039424082655*q[4]*q[2]*q[1]*q[3] + 0.2053750697119212*q[4]*q[2]*q[1]*q[4] + 0.7208803310946444*q[4]*q[2]*q[3]^2 + 0.7299238574532758*q[4]*q[2]*q[3]*q[4] + 0.19688564812646603*q[4]*q[2]*q[3]*q[1] + 0.4317965820419404*q[4]*q[2]*q[3]*q[2] + 0.6918990950027051*q[4]*q[2]*q[4]^2 + 0.7626998393501524*q[4]*q[2]*q[4]*q[1] + 0.20703121026057625*q[4]*q[2]*q[4]*q[2] + 0.6992378749064913*q[4]*q[2]*q[4]*q[3] + 0.475969596224493*q[4]*q[3]^3 + 0.9658427458323168*q[4]*q[3]^2*q[4] + 0.5025033714819218*q[4]*q[3]^2*q[1] + 0.2780579169890661*q[4]*q[3]^2*q[2] + 0.7381649879392063*q[4]*q[3]*q[1]^2 + 0.9935672307912469*q[4]*q[3]*q[1]*q[2] + 0.615949708830409*q[4]*q[3]*q[1]*q[3] + 0.5318082730666835*q[4]*q[3]*q[1]*q[4] + 0.930738875334965*q[4]*q[3]*q[2]^2 + 0.8976396202229603*q[4]*q[3]*q[2]*q[3] + 0.23755289305313032*q[4]*q[3]*q[2]*q[4] + 0.7066913495751626*q[4]*q[3]*q[2]*q[1] + 0.28591435584221137*q[4]*q[3]*q[4]^2 + 0.9231242454491305*q[4]*q[3]*q[4]*q[1] + 0.5131799219334342*q[4]*q[3]*q[4]*q[2] + 0.09536686012218853*q[4]*q[3]*q[4]*q[3]
# f=0.029474054599234245*q[1]^4 + 0.475969596224493*q[1]^3*q[2] + 0.5036422959415874*q[1]^3*q[3] + 0.9119064516767408*q[1]^3*q[4] + 0.3906170116064773*q[1]^2*q[2]^2 + 0.16049822891540388*q[1]^2*q[2]*q[3] + 0.7705058819019722*q[1]^2*q[2]*q[4] + 0.13079843034129912*q[1]^2*q[2]*q[1] + 0.9333987296006188*q[1]^2*q[3]^2 + 0.10552700773213186*q[1]^2*q[3]*q[4] + 0.5329307663694776*q[1]^2*q[3]*q[1] + 0.590637057936316*q[1]^2*q[3]*q[2] + 0.5541071100410091*q[1]^2*q[4]^2 + 0.17386661683421878*q[1]^2*q[4]*q[1] + 0.7208803310946444*q[1]^2*q[4]*q[2] + 0.885302202035244*q[1]^2*q[4]*q[3] + 0.4612073938010328*q[1]*q[2]^3 + 0.6245808753662078*q[1]*q[2]^2*q[3] + 0.40370307543627715*q[1]*q[2]^2*q[4] + 0.746384896419054*q[1]*q[2]^2*q[1] + 0.5918305195478333*q[1]*q[2]*q[1]^2 + 0.09536686012218853*q[1]*q[2]*q[1]*q[2] + 0.4884771190513396*q[1]*q[2]*q[1]*q[3] + 0.18535447123019155*q[1]*q[2]*q[1]*q[4] + 0.885302202035244*q[1]*q[2]*q[3]^2 + 0.11068657610251698*q[1]*q[2]*q[3]*q[4] + 0.6786486975975576*q[1]*q[2]*q[3]*q[1] + 0.4613775074912848*q[1]*q[2]*q[3]*q[2] + 0.9118371450632791*q[1]*q[2]*q[4]^2 + 0.8649153147171645*q[1]*q[2]*q[4]*q[1] + 0.6992378749064913*q[1]*q[2]*q[4]*q[2] + 0.9374735024162644*q[1]*q[2]*q[4]*q[3] + 0.5036422959415874*q[1]*q[3]^3 + 0.8308044475397434*q[1]*q[3]^2*q[4] + 0.5547792154549017*q[1]*q[3]^2*q[1] + 0.09229137394825226*q[1]*q[3]^2*q[2] + 0.8271533956312648*q[1]*q[3]*q[1]^2 + 0.615949708830409*q[1]*q[3]*q[1]*q[2] + 0.996556516195713*q[1]*q[3]*q[1]*q[3] + 0.3659992718302786*q[1]*q[3]*q[1]*q[4] + 0.30678470446204387*q[1]*q[3]*q[2]^2 + 0.5197258410676219*q[1]*q[3]*q[2]*q[3] + 0.38775997584969957*q[1]*q[3]*q[2]*q[4] + 0.5673749113031746*q[1]*q[3]*q[2]*q[1] + 0.01787645046371278*q[1]*q[3]*q[4]^2 + 0.8133511707419904*q[1]*q[3]*q[4]*q[1] + 0.20455039424082655*q[1]*q[3]*q[4]*q[2] + 0.4884771190513396*q[1]*q[3]*q[4]*q[3] + 0.10176382463122369*q[1]*q[4]^3 + 0.9213055678381394*q[1]*q[4]^2*q[1] + 0.6337411623226838*q[1]*q[4]^2*q[2] + 0.6245808753662078*q[1]*q[4]^2*q[3] + 0.9814291478756534*q[1]*q[4]*q[1]^2 + 0.8976396202229603*q[1]*q[4]*q[1]*q[2] + 0.5197258410676219*q[1]*q[4]*q[1]*q[3] + 0.64635781398628*q[1]*q[4]*q[1]*q[4] + 0.6743685485442624*q[1]*q[4]*q[2]^2 + 0.6945406849309422*q[1]*q[4]*q[2]*q[3] + 0.7155649994316378*q[1]*q[4]*q[2]*q[4] + 0.0015489511413381285*q[1]*q[4]*q[2]*q[1] + 0.16049822891540388*q[1]*q[4]*q[3]^2 + 0.31332013557329064*q[1]*q[4]*q[3]*q[4] + 0.8266818890419037*q[1]*q[4]*q[3]*q[1] + 0.8462869135049883*q[1]*q[4]*q[3]*q[2] + 0.24649758558490797*q[2]^4 + 0.10176382463122369*q[2]^3*q[3] + 0.49510749544258714*q[2]^3*q[4] + 0.18457818604668275*q[2]^3*q[1] + 0.7744923265235808*q[2]^2*q[1]^2 + 0.28591435584221137*q[2]^2*q[1]*q[2] + 0.01787645046371278*q[2]^2*q[1]*q[3] + 0.47588588399017473*q[2]^2*q[1]*q[4] + 0.5541071100410091*q[2]^2*q[3]^2 + 0.4822294636226676*q[2]^2*q[3]*q[4] + 0.9868916530771493*q[2]^2*q[3]*q[1] + 0.5833549409668605*q[2]^2*q[3]*q[2] + 0.5778257907369783*q[2]^2*q[4]^2 + 0.10679907897013907*q[2]^2*q[4]*q[1] + 0.6918990950027051*q[2]^2*q[4]*q[2] + 0.9118371450632791*q[2]^2*q[4]*q[3] + 0.4310891098711509*q[2]*q[1]^3 + 0.9658427458323168*q[2]*q[1]^2*q[2] + 0.8308044475397434*q[2]*q[1]^2*q[3] + 0.5430354061178913*q[2]*q[1]^2*q[4] + 0.18042422358986498*q[2]*q[1]*q[2]^2 + 0.31332013557329064*q[2]*q[1]*q[2]*q[3] + 0.9295901863101748*q[2]*q[1]*q[2]*q[4] + 0.7666654343290248*q[2]*q[1]*q[2]*q[1] + 0.10552700773213186*q[2]*q[1]*q[3]^2 + 0.3584710551037805*q[2]*q[1]*q[3]*q[4] + 0.7976347998933961*q[2]*q[1]*q[3]*q[1] + 0.5933371379139635*q[2]*q[1]*q[3]*q[2] + 0.4822294636226676*q[2]*q[1]*q[4]^2 + 0.019988947218507525*q[2]*q[1]*q[4]*q[1] + 0.7299238574532758*q[2]*q[1]*q[4]*q[2] + 
# 0.11068657610251698*q[2]*q[1]*q[4]*q[3] + 0.9119064516767408*q[2]*q[3]^3 + 0.5430354061178913*q[2]*q[3]^2*q[4] + 0.8896873460976903*q[2]*q[3]^2*q[1] + 0.5823222653713309*q[2]*q[3]^2*q[2] + 0.6109195899418173*q[2]*q[3]*q[1]^2 + 0.5318082730666835*q[2]*q[3]*q[1]*q[2] + 0.3659992718302786*q[2]*q[3]*q[1]*q[3] + 0.9380264345368569*q[2]*q[3]*q[1]*q[4] + 0.2586997417507646*q[2]*q[3]*q[2]^2 + 0.64635781398628*q[2]*q[3]*q[2]*q[3] + 0.5417580850212215*q[2]*q[3]*q[2]*q[4] + 0.43161398247746485*q[2]*q[3]*q[2]*q[1] + 0.47588588399017473*q[2]*q[3]*q[4]^2 + 0.4881610638717965*q[2]*q[3]*q[4]*q[1] + 0.2053750697119212*q[2]*q[3]*q[4]*q[2] + 0.18535447123019155*q[2]*q[3]*q[4]*q[3] + 0.49510749544258714*q[2]*q[4]^3 + 0.30123248993290863*q[2]*q[4]^2*q[1] + 0.604797381057971*q[2]*q[4]^2*q[2] + 0.40370307543627715*q[2]*q[4]^2*q[3] + 0.24483917709051883*q[2]*q[4]*q[1]^2 + 0.23755289305313032*q[2]*q[4]*q[1]*q[2] + 0.38775997584969957*q[2]*q[4]*q[1]*q[3] + 0.5417580850212215*q[2]*q[4]*q[1]*q[4] + 0.49869737947566783*q[2]*q[4]*q[2]^2 + 0.7155649994316378*q[2]*q[4]*q[2]*q[3] + 0.4582641069451401*q[2]*q[4]*q[2]*q[4] + 0.014390760237682376*q[2]*q[4]*q[2]*q[1] + 0.7705058819019722*q[2]*q[4]*q[3]^2 + 0.9295901863101748*q[2]*q[4]*q[3]*q[4] + 0.26666825556315754*q[2]*q[4]*q[3]*q[1] + 0.981840932894439*q[2]*q[4]*q[3]*q[2] + 0.029474054599234245*q[3]^4 + 0.4310891098711509*q[3]^3*q[4] + 0.7929089563253252*q[3]^3*q[1] + 0.1975965196149605*q[3]^3*q[2] + 0.8667895179398338*q[3]^2*q[1]^2 + 0.7381649879392063*q[3]^2*q[1]*q[2] + 0.8271533956312648*q[3]^2*q[1]*q[3] + 0.6109195899418173*q[3]^2*q[1]*q[4] + 0.49342665231842253*q[3]^2*q[2]^2 + 0.9814291478756534*q[3]^2*q[2]*q[3] + 0.24483917709051883*q[3]^2*q[2]*q[4] + 0.02724215266335639*q[3]^2*q[2]*q[1] + 0.7744923265235808*q[3]^2*q[4]^2 + 0.36866054979715757*q[3]^2*q[4]*q[1] + 0.646716024094237*q[3]^2*q[4]*q[2] + 0.5918305195478333*q[3]^2*q[4]*q[3] + 0.7929089563253252*q[3]*q[1]^3 + 0.5025033714819218*q[3]*q[1]^2*q[2] + 0.5547792154549017*q[3]*q[1]^2*q[3] + 0.8896873460976903*q[3]*q[1]^2*q[4] + 0.4648438860023604*q[3]*q[1]*q[2]^2 + 0.8266818890419037*q[3]*q[1]*q[2]*q[3] + 0.26666825556315754*q[3]*q[1]*q[2]*q[4] + 
# 0.831340396218595*q[3]*q[1]*q[2]*q[1] + 0.5329307663694776*q[3]*q[1]*q[3]^2 + 0.7976347998933961*q[3]*q[1]*q[3]*q[4] + 0.3705710902380688*q[3]*q[1]*q[3]*q[1] + 0.7430984127657381*q[3]*q[1]*q[3]*q[2] + 0.9868916530771493*q[3]*q[1]*q[4]^2 + 0.9381278890721954*q[3]*q[1]*q[4]*q[1] + 0.19688564812646603*q[3]*q[1]*q[4]*q[2] + 0.6786486975975576*q[3]*q[1]*q[4]*q[3] + 0.1455753929942224*q[3]*q[2]^3 + 0.9213055678381394*q[3]*q[2]^2*q[3] + 0.30123248993290863*q[3]*q[2]^2*q[4] + 0.6059417475538207*q[3]*q[2]^2*q[1] + 0.36866054979715757*q[3]*q[2]*q[1]^2 + 0.9231242454491305*q[3]*q[2]*q[1]*q[2] + 0.8133511707419904*q[3]*q[2]*q[1]*q[3] + 0.4881610638717965*q[3]*q[2]*q[1]*q[4] + 0.17386661683421878*q[3]*q[2]*q[3]^2 + 0.019988947218507525*q[3]*q[2]*q[3]*q[4] + 0.9381278890721954*q[3]*q[2]*q[3]*q[1] + 0.13801865006333547*q[3]*q[2]*q[3]*q[2] + 0.10679907897013907*q[3]*q[2]*q[4]^2 + 0.7487936165007776*q[3]*q[2]*q[4]*q[1] + 0.7626998393501524*q[3]*q[2]*q[4]*q[2] + 0.8649153147171645*q[3]*q[2]*q[4]*q[3] + 0.18457818604668275*q[3]*q[4]^3 + 0.6059417475538207*q[3]*q[4]^2*q[1] + 0.3333297263538666*q[3]*q[4]^2*q[2] + 0.746384896419054*q[3]*q[4]^2*q[3] + 0.02724215266335639*q[3]*q[4]*q[1]^2 + 0.7066913495751626*q[3]*q[4]*q[1]*q[2] + 0.5673749113031746*q[3]*q[4]*q[1]*q[3] + 0.43161398247746485*q[3]*q[4]*q[1]*q[4] + 0.7143960212505326*q[3]*q[4]*q[2]^2 + 0.0015489511413381285*q[3]*q[4]*q[2]*q[3] + 0.014390760237682376*q[3]*q[4]*q[2]*q[4] + 0.8941533782110845*q[3]*q[4]*q[2]*q[1] + 0.13079843034129912*q[3]*q[4]*q[3]^2 + 0.7666654343290248*q[3]*q[4]*q[3]*q[4] + 0.831340396218595*q[3]*q[4]*q[3]*q[1] + 0.05931789184974978*q[3]*q[4]*q[3]*q[2] + 0.24649758558490797*q[4]^4 + 0.1455753929942224*q[4]^3*q[1] + 0.41369211233754277*q[4]^3*q[2] + 0.4612073938010328*q[4]^3*q[3] + 0.49342665231842253*q[4]^2*q[1]^2 + 0.930738875334965*q[4]^2*q[1]*q[2] + 0.30678470446204387*q[4]^2*q[1]*q[3] + 0.2586997417507646*q[4]^2*q[1]*q[4] + 0.3436576277568617*q[4]^2*q[2]^2 + 0.6743685485442624*q[4]^2*q[2]*q[3] + 0.49869737947566783*q[4]^2*q[2]*q[4] + 0.7143960212505326*q[4]^2*q[2]*q[1] + 0.3906170116064773*q[4]^2*q[3]^2 + 0.18042422358986498*q[4]^2*q[3]*q[4] + 0.4648438860023604*q[4]^2*q[3]*q[1] + 0.8622503330816983*q[4]^2*q[3]*q[2] + 0.1975965196149605*q[4]*q[1]^3 + 0.2780579169890661*q[4]*q[1]^2*q[2] + 0.09229137394825226*q[4]*q[1]^2*q[3] + 0.5823222653713309*q[4]*q[1]^2*q[4] + 0.8622503330816983*q[4]*q[1]*q[2]^2 + 0.8462869135049883*q[4]*q[1]*q[2]*q[3] + 0.981840932894439*q[4]*q[1]*q[2]*q[4] + 0.05931789184974978*q[4]*q[1]*q[2]*q[1] + 0.590637057936316*q[4]*q[1]*q[3]^2 + 0.5933371379139635*q[4]*q[1]*q[3]*q[4] + 0.7430984127657381*q[4]*q[1]*q[3]*q[1] + 0.6995751636993329*q[4]*q[1]*q[3]*q[2] + 0.5833549409668605*q[4]*q[1]*q[4]^2 + 0.13801865006333547*q[4]*q[1]*q[4]*q[1] + 0.4317965820419404*q[4]*q[1]*q[4]*q[2] + 0.4613775074912848*q[4]*q[1]*q[4]*q[3] + 0.41369211233754277*q[4]*q[2]^3 + 0.6337411623226838*q[4]*q[2]^2*q[3] + 0.604797381057971*q[4]*q[2]^2*q[4] + 0.3333297263538666*q[4]*q[2]^2*q[1] + 0.646716024094237*q[4]*q[2]*q[1]^2 + 0.5131799219334342*q[4]*q[2]*q[1]*q[2] + 0.20455039424082655*q[4]*q[2]*q[1]*q[3] + 0.2053750697119212*q[4]*q[2]*q[1]*q[4] 
# + 0.7208803310946444*q[4]*q[2]*q[3]^2 + 0.7299238574532758*q[4]*q[2]*q[3]*q[4] + 0.19688564812646603*q[4]*q[2]*q[3]*q[1] + 0.4317965820419404*q[4]*q[2]*q[3]*q[2] + 0.6918990950027051*q[4]*q[2]*q[4]^2 + 0.7626998393501524*q[4]*q[2]*q[4]*q[1] + 0.20703121026057625*q[4]*q[2]*q[4]*q[2] + 0.6992378749064913*q[4]*q[2]*q[4]*q[3] + 0.475969596224493*q[4]*q[3]^3 + 0.9658427458323168*q[4]*q[3]^2*q[4] + 0.5025033714819218*q[4]*q[3]^2*q[1] + 0.2780579169890661*q[4]*q[3]^2*q[2] + 0.7381649879392063*q[4]*q[3]*q[1]^2 + 0.9935672307912469*q[4]*q[3]*q[1]*q[2] + 0.615949708830409*q[4]*q[3]*q[1]*q[3] + 0.5318082730666835*q[4]*q[3]*q[1]*q[4] + 0.930738875334965*q[4]*q[3]*q[2]^2 + 0.8976396202229603*q[4]*q[3]*q[2]*q[3] + 0.23755289305313032*q[4]*q[3]*q[2]*q[4] + 0.7066913495751626*q[4]*q[3]*q[2]*q[1] + 0.28591435584221137*q[4]*q[3]*q[4]^2 
# + 0.9231242454491305*q[4]*q[3]*q[4]*q[1] + 0.5131799219334342*q[4]*q[3]*q[4]*q[2] + 0.09536686012218853*q[4]*q[3]*q[4]*q[3]
# f=0.8622613627725926*q[1]^3 + 0.733491391703734*q[1]^2*q[2] + 1.069898525003698*q[1]^2*q[3] + 1.2009524158219986*q[1]^2*q[4] + 1.003656612678621*q[1]*q[2]^2 + 0.22908913138159015*q[1]*q[2]*q[1] + 0.8822959778856975*q[1]*q[2]*q[3] + 1.313905324130322*q[1]*q[2]*q[4] + 0.5755779131185895*q[1]*q[2]*q[1] + 1.069898525003698*q[1]*q[3]^2 + 0.45188297520408194*q[1]*q[3]*q[1] + 0.34117018798457976*q[1]*q[3]*q[2] + 0.8357402649206903*q[1]*q[3]*q[4] + 0.7604821361026951*q[1]*q[3]*q[1] + 0.1934733342531859*q[1]*q[3]*q[2] + 1.472017420849884*q[1]*q[4]^2 + 0.4583482168616493*q[1]*q[4]*q[1] + 1.6121915778920326*q[1]*q[4]*q[2] + 0.8822959778856975*q[1]*q[4]*q[3] + 0.40650738990912005*q[2]^3 + 0.07932082600569201*q[2]^2*q[1] + 1.472017420849884*q[2]^2*q[3] + 0.6937623253415071*q[2]^2*q[4] + 0.9154514543032972*q[2]^2*q[1] + 0.8889292279779649*q[2]*q[1]^2 + 1.4365073748884651*q[2]*q[1]*q[2] + 0.8357402649206903*q[2]*q[1]*q[3] + 0.31547397344852135*q[2]*q[1]*q[4] + 1.2009524158219986*q[2]*q[3]^2 + 0.8430006569771086*q[2]*q[3]*q[1] + 0.5336065237567009*q[2]*q[3]*q[2] + 0.31547397344852135*q[2]*q[3]*q[4] + 0.2567160477317827*q[2]*q[3]*q[1] + 0.3785888353301303*q[2]*q[3]*q[2] + 0.6937623253415071*q[2]*q[4]^2 + 1.202663201579813*q[2]*q[4]*q[1] + 1.287398841335527*q[2]*q[4]*q[2] + 1.313905324130322*q[2]*q[4]*q[3] + 0.8622613627725926*q[3]^3 + 0.3091716853426798*q[3]^2*q[1] + 0.5701525393542016*q[3]^2*q[2] + 0.8889292279779649*q[3]^2*q[4] + 0.31868588953484744*q[3]^2*q[1] + 0.9570025531502027*q[3]^2*q[2] + 0.6278575748775272*q[3]*q[1]^2 + 1.5583562939773783*q[3]*q[1]*q[2] + 1.212365111306777*q[3]*q[1]*q[3] + 1.0997167047088912*q[3]*q[1]*q[4] + 1.1274740727796762*q[3]*q[2]^2 + 0.18458179168411137*q[3]*q[2]*q[1] + 0.4583482168616493*q[3]*q[2]*q[3] + 1.202663201579813*q[3]*q[2]*q[4] + 0.6458736955798159*q[3]*q[2]*q[1] + 0.9947722803089892*q[3]*q[4]^2 + 0.8304554872639273*q[3]*q[4]*q[1] + 1.0375618177994306*q[3]*q[4]*q[2] + 0.8046670445001797*q[3]*q[4]*q[3] + 0.40650738990912005*q[4]^3 + 1.1274740727796762*q[4]^2*q[1] + 0.5860806927445957*q[4]^2*q[2] + 1.003656612678621*q[4]^2*q[3] + 1.5271550925044042*q[4]*q[1]^2 + 0.9532660451481598*q[4]*q[1]*q[2] + 0.5346435222377657*q[4]*q[1]*q[3] + 0.9121953590868312*q[4]*q[1]*q[4] + 0.5860806927445957*q[4]*q[2]^2 + 0.4158231028405177*q[4]*q[2]*q[1] + 1.6121915778920326*q[4]*q[2]*q[3] + 1.287398841335527*q[4]*q[2]*q[4] + 0.6217387149589128*q[4]*q[2]*q[1] + 0.733491391703734*q[4]*q[3]^2 + 0.8744986479889649*q[4]*q[3]*q[1] + 0.31766045889475525*q[4]*q[3]*q[2] + 1.4365073748884651*q[4]*q[3]*q[4] + 0.6838576459884135*q[4]*q[3]*q[1] + 0.6356055862534046*q[4]*q[3]*q[2]+ 0.6026315293750658*q[1]^2 + 0.8752427026103645*q[1]*q[2] + 0.4479437123418444*q[1]*q[3] + 0.40800090600302463*q[1]*q[4] + 0.7330721267274701*q[2]^2 + 0.09942414283811873*q[2]*q[1] + 0.40800090600302463*q[2]*q[3] + 0.3676010970291791*q[2]*q[4] + 0.6026315293750658*q[3]^2 + 0.640560125688334*q[3]*q[1] + 0.8988924651705463*q[3]*q[2] + 0.09942414283811873*q[3]*q[4] + 0.7330721267274701*q[4]^2 + 0.8988924651705463*q[4]*q[1] + 0.21960977858670605*q[4]*q[2] + 0.8752427026103645*q[4]*q[3]
# f=0.029474054599234245*q[1]^4+0.029474054599234245*q[3]^4+0.475969596224493*q[1]^3*q[2]+0.475969596224493*q[4]*q[3]^3+ 0.5036422959415874*q[1]^3*q[3]+ 0.5036422959415874*q[1]*q[3]^3+ 0.9119064516767408*q[1]^3*q[4]+ 0.9119064516767408*q[2]*q[3]^3
# f=q[1]^4+q[3]^4+q[1]^3*q[2]+q[4]*q[3]^3+q[1]^3*q[3]+q[1]*q[3]^3
g = quat(1,0,0,0)-quat(1,0,0,0)*q[1]*q[3]-quat(1,0,0,0)*q[2]*q[4]
g1 = quat(1,0,0,0)-quat(1,0,0,0)*q[1]*q[3]
g2 = quat(1,0,0,0)-quat(1,0,0,0)*q[2]*q[4]
# f2=q[1]^3*q[4]+q[2]*q[3]^3+q[1]^3*q[2]+q[4]*q[3]^3+q[1]^3*q[3]+q[1]*q[3]^3
# f2=q[1]^3*q[4]+q[2]*q[3]^3+q[1]^3*q[3]+q[1]*q[3]^3
# f2=0.9119064516767408*q[1]^3*q[4]+ 0.9119064516767408*q[2]*q[3]^3+ 0.5036422959415874*q[1]^3*q[3]+ 0.5036422959415874*q[1]*q[3]^3+0.029474054599234245*q[1]^4+0.029474054599234245*q[3]^4
order = 2
###ball
qpop=[f,g]
opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false)
####qualify
pop,x= quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 3, numeq=0,TS=false,solution=true)
###sphere
qpop = [f,g]
opt= qs_tssos_first(qpop, q, n, order, numeq=1, TS=false, QUIET=true)
####qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 2, numeq=1,solution=true, QUIET=true)

###unit
qpop = [f,g1,g2]
opt= qs_tssos_first(qpop, q, n, order, numeq=2, TS=false, QUIET=true)
####qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 2, numeq=2 ,solution=true, QUIET=true)

#n=3
rng = Xoshiro(210)
n = 3
@ncpolyvar q[1:2n]
# mon=[1,q[1],q[2],q[3]]
# monc=[1,q[4],q[5],q[6]]
# coefmatrix=Symmetric(rand(rng,length(mon),length(mon)))
# f=transpose(monc)*coefmatrix*mon
##d=2
f=randomsymfunc(q,n,1,rng)
# f=q[1]^2+q[4]^2+q[1]*q[2]+q[5]*q[4]+q[1]*q[3]+q[6]*q[4]+q[1]*q[5]+q[2]*q[4]+q[1]*q[6]+q[3]*q[4]
# f = fcoef[1]*q[1]^2+fcoef[1]*q[4]^2+fcoef[2]*q[2]^2+fcoef[2]*q[5]^2+fcoef[3]*q[3]^2+fcoef[3]*q[6]^2+fcoef[4]*q[1]+fcoef[4]*q[4]+fcoef[5]*q[2]+fcoef[5]*q[5]+fcoef[6]*q[1]*q[2]*q[3]+fcoef[6]*q[6]*q[5]*q[4]
g = quat(1,0,0,0)-quat(1,0,0,0)*q[1]*q[4]-quat(1,0,0,0)*q[2]*q[5]-quat(1,0,0,0)*q[3]*q[6]
g1 = quat(1,0,0,0)-quat(1,0,0,0)*q[1]*q[4]
g2 = quat(1,0,0,0)-quat(1,0,0,0)*q[2]*q[5]
g3 = quat(1,0,0,0)-quat(1,0,0,0)*q[3]*q[6]
order = 1
#ball
qpop = [f,g]
opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false,QUIET=true)
opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false,normality=order,QUIET=true)
#qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 2, numeq=0,solution=true,QUIET=true)

#sphere
qpop = [f,g]
opt= qs_tssos_first(qpop, q, n, order, numeq=1, TS=false, QUIET=true)
#qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 3, numeq=1,solution=true, QUIET=true)

#unit
qpop = [f,g1,g2,g3]
opt= qs_tssos_first(qpop, q, n, order, numeq=3, TS=false, QUIET=true)
#qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 3, numeq=3,solution=true, QUIET=true)

#n=4
rng = Xoshiro(1)
n = 4
@ncpolyvar q[1:2n]
##d=2
f=randomsymfunc(q,n,1,rng)
f=q[1]^2+q[5]^2+q[1]*q[2]+q[6]*q[5]+q[1]*q[3]+q[7]*q[5]+q[1]*q[4]+q[8]*q[5]+q[1]*q[5]+q[1]*q[5]+q[1]*q[6]+q[2]*q[5]+q[1]*q[7]+q[3]*q[5]+q[1]*q[8]+q[4]*q[5]
println(f)
# f = fcoef[1]*q[1]^2+fcoef[1]*q[5]^2+fcoef[2]*q[2]^2+fcoef[2]*q[6]^2+fcoef[3]*q[3]^2+fcoef[3]*q[7]^2+fcoef[4]*q[1]+fcoef[4]*q[5]+fcoef[5]*q[2]+fcoef[5]*q[6]+fcoef[6]*q[4]+fcoef[6]*q[8]
g = quat(1,0,0,0)-quat(1,0,0,0)*q[1]*q[5]-quat(1,0,0,0)*q[2]*q[6]-quat(1,0,0,0)*q[3]*q[7]-quat(1,0,0,0)*q[4]*q[8]
qpop = [f,g]
order = 1
#ball
opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false, QUIET=true)
#qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 2, numeq=0,solution=true, QUIET=true)

#sphere
opt= qs_tssos_first(qpop, q, n, order, numeq=1, TS=false, QUIET=true)
#qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 2, numeq=1,solution=true, QUIET=true)

#unit 
opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false, QUIET=true)
#qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 2, numeq=0,solution=true, QUIET=true)

#n=5
rng = Xoshiro(11)
fcoef=rand(rng,Float64,8)
n = 5
@ncpolyvar q[1:2n]
f = fcoef[1]*q[1]^2+fcoef[1]*q[6]^2+fcoef[2]*q[2]^2+fcoef[2]*q[7]^2+fcoef[3]*q[3]^2+fcoef[3]*q[8]^2+fcoef[4]*q[1]+fcoef[4]*q[6]+fcoef[5]*q[2]+fcoef[5]*q[7]+fcoef[6]*q[4]+fcoef[6]*q[9]+fcoef[7]*q[5]+fcoef[7]*q[10]
g = quat(1,0,0,0)-quat(1,0,0,0)*q[1]*q[6]-quat(1,0,0,0)*q[2]*q[7]-quat(1,0,0,0)*q[3]*q[8]-quat(1,0,0,0)*q[4]*q[9]-quat(1,0,0,0)*q[5]*q[10]
qpop = [f,g]
order = 3
#ball
opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false, QUIET=true)
#qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 3, numeq=0,solution=true, QUIET=true)

#sphere
opt= qs_tssos_first(qpop, q, n, order, numeq=1, TS=false, QUIET=true)
#qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 2, numeq=1,solution=true, QUIET=true)

#unit 
opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false, QUIET=true)
#qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 2, numeq=0,solution=true, QUIET=true)

###
rng = Xoshiro(11)
fcoef=rand(rng,Float64,8)
n = 6
@ncpolyvar q[1:2n]
f = fcoef[1]*q[1]^2+fcoef[1]*q[7]^2+fcoef[2]*q[2]^2+fcoef[2]*q[8]^2+fcoef[3]*q[3]^2+fcoef[3]*q[9]^2+fcoef[4]*q[1]+fcoef[4]*q[7]+fcoef[5]*q[2]+fcoef[5]*q[8]+fcoef[6]*q[4]+fcoef[6]*q[10]+fcoef[7]*q[5]+fcoef[7]*q[11]+fcoef[7]*q[6]^2+fcoef[7]*q[12]^2
f = fcoef[4]*q[1]+fcoef[4]*q[7]+fcoef[5]*q[2]+fcoef[5]*q[8]+fcoef[6]*q[4]+fcoef[6]*q[10]+fcoef[7]*q[5]+fcoef[7]*q[11]
g = quat(1,0,0,0)-quat(1,0,0,0)*q[1]*q[7]-quat(1,0,0,0)*q[2]*q[8]-quat(1,0,0,0)*q[3]*q[9]-quat(1,0,0,0)*q[4]*q[10]-quat(1,0,0,0)*q[5]*q[11]-quat(1,0,0,0)*q[6]*q[12]
qpop = [f,g]
order = 1
#ball
opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false, QUIET=true)
#qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 2, numeq=0,solution=true, QUIET=true)
###
rng = Xoshiro(11)
fcoef=rand(rng,Float64,8)
n = 7
@ncpolyvar q[1:2n]
f = fcoef[1]*q[1]^2+fcoef[1]*q[8]^2+fcoef[2]*q[2]^2+fcoef[2]*q[9]^2+fcoef[3]*q[3]^2+fcoef[3]*q[10]^2+fcoef[4]*q[4]^2+fcoef[4]*q[11]^2+fcoef[5]*q[5]+fcoef[5]*q[12]+fcoef[6]*q[6]+fcoef[6]*q[13]+fcoef[7]*q[6]*q[7]+fcoef[7]*q[14]*q[13]+fcoef[8]*q[7]^2+fcoef[8]*q[14]^2
g = quat(1,0,0,0)-quat(1,0,0,0)*q[1]*q[8]-quat(1,0,0,0)*q[2]*q[9]-quat(1,0,0,0)*q[3]*q[10]-quat(1,0,0,0)*q[4]*q[11]-quat(1,0,0,0)*q[5]*q[12]-quat(1,0,0,0)*q[6]*q[13]-quat(1,0,0,0)*q[7]*q[14]
qpop = [f,g]
order = 1
#ball
opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false)
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 1, numeq=0,TS=false,solution=true)
###
###
rng = Xoshiro(12)
fcoef=rand(rng,Float64,8)
n = 8
@ncpolyvar q[1:2n]
f = fcoef[1]*q[1]^2+fcoef[1]*q[9]^2+fcoef[2]*q[2]^2+fcoef[2]*q[10]^2+fcoef[3]*q[3]^2+fcoef[3]*q[11]^2+fcoef[4]*q[4]^2+fcoef[4]*q[12]^2+fcoef[5]*q[5]+fcoef[5]*q[13]+fcoef[6]*q[6]+fcoef[6]*q[14]+fcoef[7]*q[7]*q[8]+fcoef[7]*q[16]*q[15]+fcoef[8]*q[8]^2+fcoef[8]*q[16]^2
g = quat(1,0,0,0)-quat(1,0,0,0)*q[1]*q[9]-quat(1,0,0,0)*q[2]*q[10]-quat(1,0,0,0)*q[3]*q[11]-quat(1,0,0,0)*q[4]*q[12]-quat(1,0,0,0)*q[5]*q[13]-quat(1,0,0,0)*q[6]*q[14]-quat(1,0,0,0)*q[7]*q[15]-quat(1,0,0,0)*q[8]*q[16]
qpop = [f,g]
order = 1
#ball
opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false)
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 1, numeq=0,solution=true)
###
rng = Xoshiro(11)
fcoef=rand(rng,Float64,8)
n = 9
@ncpolyvar q[1:2n]
f = fcoef[1]*q[1]^4+fcoef[1]*q[10]^4+fcoef[2]*q[2]^4+fcoef[2]*q[11]^4+fcoef[3]*q[3]^2+fcoef[3]*q[12]^2+fcoef[4]*q[4]^2+fcoef[4]*q[13]^2+fcoef[5]*q[5]+fcoef[5]*q[14]+fcoef[6]*q[6]+fcoef[6]*q[15]+fcoef[7]*q[7]*q[8]+fcoef[7]*q[17]*q[16]+fcoef[8]*q[9]^2+fcoef[8]*q[18]^2
g = quat(1,0,0,0)-quat(1,0,0,0)*q[1]*q[10]-quat(1,0,0,0)*q[2]*q[11]-quat(1,0,0,0)*q[3]*q[12]-quat(1,0,0,0)*q[4]*q[13]-quat(1,0,0,0)*q[5]*q[14]-quat(1,0,0,0)*q[6]*q[15]-quat(1,0,0,0)*q[7]*q[16]-quat(1,0,0,0)*q[8]*q[17]-quat(1,0,0,0)*q[9]*q[18]
qpop = [f,g]
order = 2
#ball
opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false)

###
rng = Xoshiro(11)
fcoef=rand(rng,Float64,8)
n = 10
@ncpolyvar q[1:2n]
# f = fcoef[1]*q[1]^2+fcoef[1]*q[11]^2+fcoef[2]*q[2]^2+fcoef[2]*q[12]^2+fcoef[3]*q[3]^2+fcoef[3]*q[13]^2+fcoef[4]*q[4]^2+fcoef[4]*q[14]^2+fcoef[5]*q[5]+fcoef[5]*q[15]+fcoef[6]*q[6]+fcoef[6]*q[16]+fcoef[7]*q[7]*q[8]+fcoef[7]*q[18]*q[17]+fcoef[8]*q[10]^2+fcoef[8]*q[20]^2
f = fcoef[5]*q[5]+fcoef[5]*q[15]+fcoef[6]*q[6]+fcoef[6]*q[16]+fcoef[7]*q[7]*q[8]+fcoef[7]*q[18]*q[17]+fcoef[8]*q[9]*q[10]+fcoef[8]*q[20]*q[19]+fcoef[1]*q[1]*q[5]+fcoef[1]*q[15]*q[11]
g = quat(1,0,0,0)-quat(1,0,0,0)*q[1]*q[11]-quat(1,0,0,0)*q[2]*q[12]-quat(1,0,0,0)*q[3]*q[13]-quat(1,0,0,0)*q[4]*q[14]-quat(1,0,0,0)*q[5]*q[15]-quat(1,0,0,0)*q[6]*q[16]-quat(1,0,0,0)*q[7]*q[17]-quat(1,0,0,0)*q[8]*q[18]-quat(1,0,0,0)*q[9]*q[19]-quat(1,0,0,0)*q[10]*q[20]
qpop = [f,g]
order = 1
#ball
opt= qs_tssos_first(qpop, q, n, order, numeq=0, TS=false)
#qualify
pop,x = quaternion_to_real(qpop,q)
opt2 = tssos_first(pop, x, 1, numeq=0,solution=true, TS=false)




